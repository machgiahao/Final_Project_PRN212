@page
@model BookManagement.Pages.Admin.Book.IndexModel
@{
    ViewData["Title"] = "Book Management";
    Layout = "_AdminLayout";
}
@functions {
    string BuildQueryString(int pageNumber, int? pageSize = null)
    {
        var query = new List<string> { $"Filter.PageNumber={pageNumber}" };
        if (Model.Filter.SelectedCategories != null && Model.Filter.SelectedCategories.Any())
            query.Add($"Filter.SelectedCategories={string.Join(",", Model.Filter.SelectedCategories)}");
        if (Model.Filter.MinPrice.HasValue)
            query.Add($"Filter.MinPrice={Model.Filter.MinPrice.Value}");
        if (Model.Filter.MaxPrice.HasValue)
            query.Add($"Filter.MaxPrice={Model.Filter.MaxPrice.Value}");
        if (pageSize.HasValue)
            query.Add($"Filter.PageSize={pageSize.Value}");
        else
            query.Add($"Filter.PageSize={Model.Pagination.PageSize}");
        return "?" + string.Join("&", query);
    }
}
<link rel="stylesheet" href="~/css/Dashboard/bookManagement.css" />

<div class="book-admin-outer">
    <div class="book-admin-container">
        <div class="table-box">
            <div class="table-header">
                <span>Book Management</span>
                <button type="button" class="btn btn-primary ms-2 create-btn" data-bs-toggle="modal" data-bs-target="#createBookModal" id="createNewBookBtn">
                    <i class="bi bi-plus-circle me-1"></i> Create New
                </button>
            </div>
            <div class="table-responsive">
                <table class="user-table">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Title</th>
                            <th>Author</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Sold</th>
                            <th>Status</th>
                            <th>Created At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var book in Model.BookViewModel)
                        {
                            <tr>
                                <td>
                                    @if (!string.IsNullOrEmpty(book.ImageUrl))
                                    {
                                        <img src="@book.ImageUrl" alt="Book Image" class="img-thumbnail" style="max-width:60px;max-height:80px;" />
                                    }
                                </td>
                                <td>@book.Title</td>
                                <td>@book.Author</td>
                                <td>@book.CategoryName</td>
                                <td>@book.Price?.ToString("N0") đ</td>
                                <td>@book.Stock</td>
                                <td>@book.Sold</td>
                                <td>
                                    @if (book.StatusDisplay == "Available")
                                    {
                                        <span class="badge badge-status-available">Available</span>
                                    }
                                    else if (book.StatusDisplay == "Sold Out")
                                    {
                                        <span class="badge badge-status-soldout">Sold Out</span>
                                    }
                                    else if (book.StatusDisplay == "Hidden")
                                    {
                                        <span class="badge badge-status-hide">Hidden</span>
                                    }
                                </td>
                                <td>@book.CreatedAt?.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <button type="button"
                                            class="icon-btn delete-btn"
                                            title="Delete"
                                            data-bs-toggle="modal"
                                            data-bs-target="#deleteModal-@book.BookId"
                                            onclick="event.stopPropagation();">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    <a asp-page-handler="Edit" asp-route-id="@book.BookId" class="icon-btn edit-btn me-2" title="Edit" onclick="event.stopPropagation();">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="table-footer">
                @if (Model.Pagination.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center mt-4">
                            <li class="page-item @(Model.Pagination.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@BuildQueryString(Model.Pagination.CurrentPage - 1)">Previous</a>
                            </li>
                            @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@BuildQueryString(i)">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.Pagination.CurrentPage == Model.Pagination.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@BuildQueryString(Model.Pagination.CurrentPage + 1)">Next</a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="createBookModal" tabindex="-1" aria-labelledby="createBookModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
        </div>
    </div>
</div>
@section Scripts {
    <script>
        console.log("Index.cshtml scripts section loaded!"); // THÊM DÒNG NÀY

        $(document).ready(function () {
            console.log("Document ready!"); // THÊM DÒNG NÀY

            $('#createNewBookBtn').on('click', function() { // THÊM DÒNG NÀY ĐỂ DEBUG NÚT CLICK
                console.log("Create New button clicked!");
            });


            $('#createBookModal').on('show.bs.modal', function (event) {
                console.log("Modal show event triggered!");
                var modal = $(this);
                $.get('@Url.Page("/Admin/Book/Create", "PartialForm")', function (data) {
                    console.log("AJAX request completed!"); // Thêm dòng này
                    modal.find('.modal-content').html(data);
                    $.validator.unobtrusive.parse(modal.find('form'));
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    console.error("AJAX request failed:", textStatus, errorThrown, jqXHR.responseText); // Thêm dòng này để bắt lỗi AJAX
                });
            });

            // Event delegation for form submission inside the modal
            $(document).on('submit', '#createBookModal form', function (e) {
                e.preventDefault();
                console.log("Form submitted from modal!"); // Thêm dòng này

                var form = $(this);
                if (form.valid()) {
                    $.ajax({
                        url: form.attr('action'),
                        type: form.attr('method'),
                        data: new FormData(form[0]),
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            if (response.success) {
                                $('#createBookModal').modal('hide');
                                location.reload();
                                alert(response.message || "Book created successfully!");
                            } else {
                                form.closest('.modal-content').html(response);
                                $.validator.unobtrusive.parse(form);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert("An error occurred: " + (xhr.responseJSON?.message || error));
                        }
                    });
                }
            });
        });
    </script>
}
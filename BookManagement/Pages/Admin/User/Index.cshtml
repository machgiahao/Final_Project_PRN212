@page
@using BookManagement.ViewModels.User
@model BookManagement.Pages.User.IndexModel

@{
    ViewData["Title"] = "User Management";
    ViewData["CreateFormPartial"] = "User/_Createform";
    ViewData["EditFormPartial"] = "User/_EditForm";
    Layout = "_AdminLayout";
}
@functions {
    string BuildQueryString(int pageNumber, int? pageSize = null)
    {
        var query = new List<string> { $"Filter.PageNumber={pageNumber}" };
        if (!string.IsNullOrWhiteSpace(Model.Filter.Name))
            query.Add($"Filter.Name={Model.Filter.Name}");
        if (!string.IsNullOrWhiteSpace(Model.Filter.Email))
            query.Add($"Filter.Email={Model.Filter.Email}");
        if (!string.IsNullOrWhiteSpace(Model.Filter.Phone))
            query.Add($"Filter.Phone={Model.Filter.Phone}");
        if (pageSize.HasValue)
            query.Add($"Filter.PageSize={pageSize.Value}");
        else
            query.Add($"Filter.PageSize={Model.Pagination.PageSize}");
        return "?" + string.Join("&", query);
    }
}
<link rel="stylesheet" href="~/css/User/index.css" />
@if (TempData["Message"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="user-admin-outer">
    <div class="user-admin-container">
        <div class="filter-box">
            <form method="get" class="filter-form">
                <div class="filter-row">
                    <div class="filter-group">
                        <label>Name</label>
                        <input type="text" name="Filter.Name" value="@Model.Filter.Name" autocomplete="off" />
                    </div>
                    <div class="filter-group">
                        <label>Email</label>
                        <input type="text" name="Filter.Email" value="@Model.Filter.Email" autocomplete="off" />
                    </div>
                    <div class="filter-group">
                        <label>Phone number</label>
                        <input type="text" name="Filter.Phone" value="@Model.Filter.Phone" autocomplete="off" />
                    </div>
                    <div class="filter-actions">
                        <button type="submit" class="btn btn-primary">Search</button>
                        <a href="/User/Index" class="btn btn-light">Clear</a>
                    </div>
                </div>
            </form>
        </div>

        <div class="table-box">
            <div class="table-header">
                <span>Table List Users</span>
                <a href="#" data-bs-toggle="modal" data-bs-target="#createModal" class="btn btn-primary ms-2 create-btn">
                    <i class="bi bi-plus-circle me-1"></i> Create New
                </a>
                @await Html.PartialAsync("_CreateModal", Model.CreateUserViewModel)

            </div>
            <table class="user-table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Full Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Created At</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.UserViewModel != null)
                    {
                        @foreach (var user in Model.UserViewModel)
                        {
                            <tr>
                                <td>
                                    <a href="/User/Details?id=@user.UserId" class="user-id-link">@user.UserId</a>
                                </td>
                                <td>@user.FullName</td>
                                <td>@user.Email</td>
                                <td>@user.PhoneNumber</td>
                                <td>@user.CreatedAt?.ToString("dd-MM-yyyy HH:mm:ss")</td>
                                <td>
                                    <button type="button"
                                            class="icon-btn delete-btn"
                                            title="Delete"
                                            data-bs-toggle="modal"
                                            data-bs-target="#deleteModal-@user.UserId"
                                            onclick="event.stopPropagation();">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    <a asp-page-handler="Edit" asp-route-id="@user.UserId" class="icon-btn edit-btn me-2" title="Edit" onclick="event.stopPropagation();">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @* pagination *@
            <div class="table-footer">
                @if (Model.Pagination.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center mt-4">
                            <li class="page-item @(Model.Pagination.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@BuildQueryString(Model.Pagination.CurrentPage - 1)">Previous</a>
                            </li>
                            @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@BuildQueryString(i)">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.Pagination.CurrentPage == Model.Pagination.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@BuildQueryString(Model.Pagination.CurrentPage + 1)">Next</a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

<!-- Replace the direct partial with the shared _EditModal -->
@await Html.PartialAsync("_EditModal", Model.EditUserViewModel)

@if (Model.UserViewModel != null)
{
    foreach (var item in Model.UserViewModel)
    {
        @await Html.PartialAsync("_DeleteModal", item.UserId, new ViewDataDictionary(ViewData)
        {
            { "Name", item.FullName }
        })
    }
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    @if (ViewData["ShowEditModal"] as bool? == true)
    {
        <script>
            var editModal = new bootstrap.Modal(document.getElementById('editModal'));
            editModal.show();
        </script>
    }
    @if (ViewData["ShowCreateModal"] as bool? == true)
    {
        <script>
            var createModal = new bootstrap.Modal(document.getElementById('createModal'));
            createModal.show();
        </script>
    }
    <script>
        setTimeout(function () {
            document.querySelectorAll('.alert-dismissible').forEach(function(alert) {
                var bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                bsAlert.close();
            });
        }, 3000);
    </script>
}

@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var selectedCategories = Model.Filter.SelectedCategories != null && Model.Filter.SelectedCategories.Any()
        ? Model.Filter.SelectedCategories.Select(id => $"Filter.SelectedCategories={id}")
        : Enumerable.Empty<string>();
    var categoryQuery = string.Join("&", selectedCategories);
}
@functions {
    string BuildQueryString(int pageNumber)
    {
        var query = new List<string> { $"Filter.PageNumber={pageNumber}" };

        if (Model.Filter.SelectedCategories != null)
        {
            foreach (var cat in Model.Filter.SelectedCategories)
            {
                query.Add($"Filter.SelectedCategories={cat}");
            }
        }
        if (Model.Filter.MinPrice.HasValue)
        {
            query.Add($"Filter.MinPrice={Model.Filter.MinPrice.Value}");
        }
        if (Model.Filter.MaxPrice.HasValue)
        {
            query.Add($"Filter.MaxPrice={Model.Filter.MaxPrice.Value}");
        }
        return "?" + string.Join("&", query);
    }
}

<link rel="stylesheet" href="~/css/book.css" />
<div class="container-fluid mt-4">
    <div class="row">
        <!-- Sidebar Filter -->
        <div class="col-md-3">
            <div class="card filter-card">
                <div class="card-header">
                    <strong>Search Filters</strong>
                </div>
                <div class="card-body">
                    <h6>Categories</h6>
                    <form method="get">
                        @if (Model.Categories != null && Model.Categories.Any())
                        {
                            foreach (var category in Model.Categories)
                            {
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="cat_@category.CategoryId"
                                           name="Filter.SelectedCategories"
                                           value="@category.CategoryId"
                                    @(Model.Filter.SelectedCategories != null && Model.Filter.SelectedCategories.Contains(category.CategoryId) ? "checked" : "") />
                                    <label class="form-check-label" for="cat_@category.CategoryId">@category.Name</label>
                                </div>
                            }
                        }
                        <hr />
                        <h6>Price Range</h6>
                        <div class="input-group mb-2">
                            <input type="number" class="form-control" name="Filter.MinPrice" value="@(Model.Filter.MinPrice ?? null)" placeholder="50,000" min="0" />
                            <span class="input-group-text">-</span>
                            <input type="number" class="form-control" name="Filter.MaxPrice" value="@(Model.Filter.MaxPrice ?? null)" placeholder="2,000,000" min="0" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Apply</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-body">
                    <!-- Book Cards -->
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 g-3">
                        @if (Model.Books != null && Model.Books.Any())
                        {
                            foreach (var book in Model.Books)
                            {
                                <div class="col d-flex">
                                    <div class="card h-100 w-100 shadow-sm book-card" style="min-width: 160px; max-width: 180px;">
                                        <img src="@(string.IsNullOrEmpty(book.ImageUrl) ? Url.Content("~/img/default.jpg") : Url.Content(book.ImageUrl))"
                                             class="card-img-top"
                                             alt="Book Cover"
                                             style="object-fit:cover; height:130px;">
                                        <div class="card-body p-2 d-flex flex-column">
                                            <h6 class="card-title mb-1" style="min-height:2.2em; font-size:1em;">@book.Title</h6>
                                            <p class="card-text mb-1" style="font-size:1em;">
                                                <strong>@($"{book.Price?.ToString("N0") ?? "0"} ₫")</strong>
                                            </p>
                                            <div class="d-flex align-items-center justify-content-between mt-1">
                                                <span class="rating">&#9733;&#9733;&#9733;&#9733;&#9733;</span>
                                                <span class="sold ms-1">Sold <b>@book.Sold</b></span>
                                            </div>
                                            <div class="mt-auto"></div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col">
                                <div class="alert alert-info w-100">No books to display.</div>
                            </div>
                        }
                    </div>

                    @* Pagination *@
                    @if (Model.Pagination.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center mt-4">
                                <li class="page-item @(Model.Pagination.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="@BuildQueryString(Model.Pagination.CurrentPage - 1)">Previous</a>
                                </li>
                                @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
                                {
                                    <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@BuildQueryString(i)">@i</a>
                                    </li>
                                }
                                <li class="page-item @(Model.Pagination.CurrentPage == Model.Pagination.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="@BuildQueryString(Model.Pagination.CurrentPage + 1)">Next</a>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
